#!/bin/bash

function select_workspace {

  # get current terraform workspaces
  mapfile -t workspaces < <(terraform workspace list)

  # Check if there is already a workspace called after the current git branch and select it
  # Create workspace if it does not yet exist
  found=false
  for workspace in "${workspaces[@]}"
  do
      w=$(echo "$workspace" | tr -d " \"" | tr -d "*\"")
      if [ "$w" == "$1" ]
      then
        found=true
        break
      fi
  done

  echo "Setting workspace to '$1'"
  if $found
  then
    terraform workspace select "$1"
  else
    terraform workspace new "$1"
  fi
}


# get current git branch and replace / with -
if [ -z "${1}" ]; then
  echo "No target branch set. Using current branch"
  read -r cur_branch < <(git rev-parse --abbrev-ref HEAD | tr "/" "-")
else
  echo "Target branch set to ${1}"
  prefix="refs/heads/"
  cur_branch=$(echo "${1#"$prefix"}" | tr "/" "-")
fi

# These branch names are reserved and should always use the default workspace unless FORCE is true
if [[ $FORCE = false && $cur_branch =~ ^(master|develop|production|staging|dev)$ ]]
then
  echo "Setting workspace to 'default'"
  terraform workspace select default
else
  select_workspace "$cur_branch"
fi

WORKSPACE=$(terraform workspace show)

